#!/usr/bin/perl

use lib "$ENV{CHIPSEEQERDIR}";
use Sets;
use strict;
use Getopt::Long;

my $file1 = undef;
my $file2 = undef;

my %scoresHash	= ();

#
# get options
#
GetOptions
(	"peakfile1=s"   => \$file1,
"peakfile2=s"   => \$file2);

if (! -e $file1) {
	die "$file1 cannot be opened\n";
} 
if (! -e $file2) {
	die "$file2 cannot be opened\n";
}

#
# Run Compare Intervals both ways
#
my $tmpfile1 = Sets::getTempFile("/tmp/tmpfile1");
my $tmpfile2 = Sets::getTempFile("/tmp/tmpfile2");   

my $todo = "$ENV{CHIPSEEQERDIR}/CompareIntervals -peakfile1 $file1 -peakfile2 $file2 -showovpeaks 1 -ovtype AND -show_ov_int 1 -showscores 0 -showunion 1 > $tmpfile1";
system($todo) == 0 or die "Cannot exec $todo\n";

my $todo = "$ENV{CHIPSEEQERDIR}/CompareIntervals -peakfile1 $file2 -peakfile2 $file1 -showovpeaks 1 -ovtype AND -show_ov_int 1 -showscores 0 -showunion 1 > $tmpfile2";
system($todo) == 0 or die "Cannot exec $todo\n";

#
# Open results from first run and store union peak in separate file
#
my $union1	= Sets::getTempFile("/tmp/union1");

open IN, $tmpfile1;
open UNION1, ">$union1";

while (my $line = <IN>) {
	chomp $line; 
	
	my @peak = (split /\t/, $line); 
	my $score = $peak[3];
	my $cnt	  = 1;
	
	foreach my $val (@peak) {
		
		if($val =~ /:/) {
			my @ovpeak = (split /:/, $val); 
			$score += $ovpeak[1];
			$cnt ++;
		}
	}
	my $avgscore	= $score/$cnt;	
	
	my $last1		= (split/\t/, $line)[-1];
	
	my @unionpeak	= (split /-/, $last1); 
	
	#print "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\t$avgscore\n";
	print UNION1 "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\n";
	
	my $tmp = "$unionpeak[0]-$unionpeak[1]-$unionpeak[2]";
	
	$scoresHash{$tmp} = $avgscore;
}

close UNION1;
close IN;

#
# Open results from second run and store union peak in separate file
#
my $union2	= Sets::getTempFile("/tmp/union2");

open IN, $tmpfile2;
open UNION2, ">$union2";

while (my $line = <IN>) {
 	chomp $line; 
	
	my @peak = (split /\t/, $line); 
	my $score = $peak[3];
	my $cnt	  = 1;
	
	foreach my $val (@peak) {
		
		if($val =~ /:/) {
			my @ovpeak = (split /:/, $val); 
			$score += $ovpeak[1];
			$cnt ++;
		}
	}
	my $avgscore	= $score/$cnt;
	
	my $last1		= (split/\t/, $line)[-1];
	
	my @unionpeak	= (split /-/, $last1); 
	
	#print "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\t$avgscore\n";
	print UNION2 "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\n"; 
	
	my $tmp = "$unionpeak[0]-$unionpeak[1]-$unionpeak[2]";
	
	$scoresHash{$tmp} = $avgscore;
}

close UNION2;
close IN;

#
# Run Compare Intervals on the union peaks
#
my $unioncomp = Sets::getTempFile("/tmp/unioncomp");
my $todo = "$ENV{CHIPSEEQERDIR}/CompareIntervals -peakfile1 $union2 -peakfile2 $union1 -showovpeaks 1 -ovtype AND -show_ov_int 1 -showunion 1 -showpeakdesc 0 > $unioncomp";
system($todo) == 0 or die "Cannot exec $todo\n";

#
# Open results from the Union run and store union peak in separate file
#
my $unionfinal	= Sets::getTempFile("/tmp/union");

open IN, $unioncomp;
open UNIONF, ">$unionfinal";

while (my $line = <IN>) {
 	chomp $line; 
	
	my $last1 = (split/\t/, $line)[-1];
	
	my @unionpeak = (split /-/, $last1); 
	
	#print "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\n";
	print UNIONF "$unionpeak[0]\t$unionpeak[1]\t$unionpeak[2]\t";
	
	my $tmp = "$unionpeak[0]-$unionpeak[1]-$unionpeak[2]";
		
	if(exists($scoresHash{$tmp})) {
		print  UNIONF "$scoresHash{$tmp}\n";
	}
}

close UNIONF;
close IN;

# keep unique records only
my $todo = "cat $unionfinal | sort -u";
system($todo) == 0 or die "Cannot exec $todo\n";

unlink $tmpfile1;
unlink $tmpfile2;
unlink $union1;
unlink $union2;
unlink $unioncomp;
