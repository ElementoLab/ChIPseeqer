#!/usr/bin/perl

use lib "$ENV{CHIPSEEQERDIR}";

use CommonPaths;
use Getopt::Long;
use Tie::File;
use Table;
use Sets;
use strict;
use Time::HiRes qw(gettimeofday tv_interval);

my $peakfile	= undef;
my $db			= "refSeq";		# could be refSeq, AceView, Ensembl, UCSCGenes
my $genome		= "hg18";		# could be hg18, mm9, dm3, sacser
my $chrdata		= undef;
my $CpGislands	= undef;
my $lenuP       = 2000;
my $lendP       = 2000;
my $lenuDW      = 2000;
my $lendDW      = 2000;

my $peaks_num	= undef;
my $proms_num	= undef;
my $dw_num		= undef;
my $exons_num	= undef;
my $introns_num	= undef;
my $distal_num	= undef;
my $inter_num	= undef;

my $cpg_num		= undef;

my $avg_peaks_size	= undef;
my $tmp_peaks_size	= undef;
my $size			= undef;

my @all_peaks_num	= undef;
my @all_lines_num	= undef;
my @all_files_tmp	= undef;
my @all_files		= undef;
my @cpgfile			= undef;

my $promoters_file	= undef;
my $dw_file			= undef;
my $exons_file		= undef;
my $introns_file	= undef;
my $distal_file		= undef;
my $intergenic_file	= undef;

my $iterations	= 10;
my $randmode	= "default";	# Can be "gendist", for genomic distribution: to preserve the same distribution of peaks in promoters/exons/etc
# or "CGI", for CpG islands: to preserve the same fraction of peaks overlapping with CpG islands
# or "default", for creating totally random regions

my $verbose		= 0;
my $prefix		= undef;
my $outdir		= undef;
my $fromgui		= 0;

# handling of missing arguments
if (@ARGV == 0) {
	die "Usage: ChIPseeqerCreateRandomRegions --peakfile=FILE --prefix=STR\n";
}

GetOptions("peakfile=s"  => \$peakfile,
"db=s"			=> \$db,
"genome=s"		=> \$genome,
"lenuP=s"		=> \$lenuP,
"lendP=s"		=> \$lendP,
"lenuDW=s"		=> \$lenuDW,
"lendDW=s"		=> \$lendDW,
"prefix=s"		=> \$prefix,
"outdir=s"		=> \$outdir,
"iterations=s"	=> \$iterations,
"randmode=s"	=> \$randmode,
"verbose=s"		=> \$verbose,
"fromgui=s"		=> \$fromgui);

if (defined($outdir)) {
	$prefix = "$outdir/$prefix";
}

if ($genome eq "sacser") {
	$db				= "sgd";
}

$chrdata	= "$ENV{CHIPSEEQERDIR}/DATA/$genome.chrdata";

$exons_file			= "$ENV{CHIPSEEQERDIR}/DATA/$genome/$db.EXONS";
$introns_file		= "$ENV{CHIPSEEQERDIR}/DATA/$genome/$db.INTRONS";
$distal_file		= "$ENV{CHIPSEEQERDIR}/DATA/hg18/refSeq.DISTAL_2-50kb";
$intergenic_file	= "$ENV{CHIPSEEQERDIR}/DATA/hg18/refSeq.INTERGENIC_gt50kb";
 
$CpGislands			= $CommonPaths::HG18_CpGislands;

#
# Estimate average peak size; we use it to extract the random peak regions. We need it in both randmodes
#
open IN, "$peakfile";

while (my $l = <IN>) {
	chomp $l;
	my @a = split /\t/, $l, -1;
	
	$tmp_peaks_size += $a[8];
	$peaks_num += 1;
}
close IN;

# compute the avg peaks size
$avg_peaks_size = sprintf("%3.f", $tmp_peaks_size/$peaks_num);

if($randmode eq "gendist") {
	
	#
	# Run CSAnnotate to get percentages of peaks in genomic categories
	#
	my $todo = "$ENV{CHIPSEEQERDIR}/ChIPseeqerAnnotate --targets=$peakfile --db=$db --genome=$genome --lenuP=$lenuP --lendP=$lendP --lenuDW=$lenuDW --lendDW=$lendDW --fromgui=$fromgui --print_stats=0";
	if ($verbose == 1){ 
		print "$todo\n";
	}
	print "Running ChIPseeqerAnnotate ...\n";
	system($todo) == 0 or die "Cannot exec $ENV{CHIPSEEQERDIR}/ChIPseeqerAnnotate\n";
	
	# if the stats file exists
	if (-e "$peakfile.$db.GP.stats") {	
		
		open IN, "$peakfile.$db.GP.stats";
		
		while (my $l = <IN>) {
			chomp $l;
			my @a = split /\t/, $l, -1;
			
			push(@all_peaks_num, $a[1]);		
		}
		close IN;
		
		#$peaks_num		= "$all_peaks_num[1]";
		$proms_num		= "$all_peaks_num[2]";
		$dw_num			= "$all_peaks_num[3]";
		$exons_num		= "$all_peaks_num[4]";
		$introns_num	= "$all_peaks_num[5]";
		$distal_num		= "$all_peaks_num[6]";
		$inter_num		= "$all_peaks_num[7]";
		
	}
	
	# Now that CSAnnotate run...
	
	print &GetPromotersDWFiles();
	
	#
	# Cleanup files from weird chromosomes
	#
	open PROMOTERS, ">$peakfile.promoters";
	open DW, ">$peakfile.dw";
	open INTRONS, ">$peakfile.introns";
	open EXONS, ">$peakfile.exons";
	
	open( FHP, $promoters_file ) or die "Can't open $promoters_file: $!\n";
	while( my $l = <FHP> ){
		chomp $l;
		my @a = split /\t/, $l, -1;
		next if $a[1] =~ m/_/;
		print PROMOTERS "$l\n";
	}
	close FHP;
	open( FHDW, $dw_file ) or die "Can't open $dw_file: $!\n";
	while( my $l = <FHDW> ){
		chomp $l;
		my @a = split /\t/, $l, -1;
		next if $a[1] =~ m/_/;
		print DW "$l\n";
	}
	close FHDW;
	open( FHEX, $exons_file ) or die "Can't open $exons_file: $!\n";
	while( my $l = <FHEX> ){
		chomp $l;
		my @a = split /\t/, $l, -1;
		next if $a[1] =~ m/_/;
		print EXONS "$l\n";
	}
	close FHEX;
	open( FHIN, $introns_file ) or die "Can't open $introns_file: $!\n";
	while( my $l = <FHIN> ){
		chomp $l;
		my @a = split /\t/, $l, -1;
		next if $a[1] =~ m/_/;
		print INTRONS "$l\n";
	}
	close FHIN;
	
	close PROMOTERS;
	close DW;
	close INTRONS;
	close EXONS;
	
	
	$promoters_file		= "$peakfile.promoters";
	$dw_file			= "$peakfile.dw";
	$exons_file			= "$peakfile.exons";
	$introns_file		= "$peakfile.introns";
	
	push(@all_files_tmp, $promoters_file, $dw_file, $exons_file, $introns_file, $distal_file, $intergenic_file);
	push(@all_files, 'promoters', 'dw', 'exons', 'introns', 'distal', 'intergenic');
	
	# open files and count their lines
	open (PF, $promoters_file) || die "Could not open $promoters_file: $!\n";
	my @pl = <PF>;
	close PF;
	my $prom_lines = @pl;
	
	open (DWF, $dw_file) || die "Could not open $dw_file: $!\n";
	my @dwl = <DWF>;
	close DWF;
	my $dw_lines = @dwl;
	
	open (EXF, $exons_file) || die "Could not open $exons_file: $!\n";
	my @exl = <EXF>;
	close EXF;
	my $exons_lines = @exl;
	
	open (INF, $introns_file) || die "Could not open $introns_file: $!\n";
	my @inl = <INF>;
	close INF;
	my $introns_lines = @inl;
	
	open (DIF, $distal_file) || die "Could not open $distal_file: $!\n";
	my @dil = <DIF>;
	close DIF;
	my $distal_lines = @dil;
	
	open (INTF, $intergenic_file) || die "Could not open $intergenic_file: $!\n";
	my @intl = <INTF>;
	close INTF;
	my $intergenic_lines = @intl;
	
	push(@all_lines_num, $prom_lines, $dw_lines, $exons_lines, $introns_lines, $distal_lines, $intergenic_lines);
	
	#
	# Extract random promoters/dw/introns/exons for $iterations
	#
	$size = @all_files_tmp;
	
	my $t0 = [gettimeofday];
	
	for(my $j=0; $j<$iterations; $j++) {
		print &CreateRandomRegions($j);
	} #end of iterations
	
	my $t1 = [gettimeofday];
	my $t0_t1 = tv_interval $t0, $t1;
	
	print "\nELAPSED TIME: $t0_t1\n";
	
	#
	# Delete all rest of the files. We keep only the $prefix.randompeaks.txt
	#
	#unlink<$peakfile.*>;
	#unlink<$prefix.*.tmp>;
}
elsif($randmode eq "CGI") {
	if ($genome ne "hg18") {
		die("This mode is currently only supported for hg18");
	}
	else {
		
		#
		# Cleanup file from weird chromosomes
		#
		open CPG, ">$peakfile.cpgislands";
		
		open(FCPG, $CpGislands) or die "Can't open $CpGislands: $!\n";
		while(my $l = <FCPG>){
			chomp $l;
			my @a = split /\t/, $l, -1;
			next if $a[0] =~ m/_/;
			print CPG "$l\n";
		}
		close CPG;
		
		#
		# Run NongenicAnnotate to get how many peaks overlap with CpG islands (e.g., x)
		#
		my $todo = "$ENV{CHIPSEEQERDIR}/ChIPseeqerNongenicAnnotate --targets=$peakfile --type=CpGislands ";
		
		if ($verbose == 1) {
			print "Exec: $todo\n";
		}
		
		print "Running ChIPseeqerNongenicAnnotate for $peakfile... ";
		system($todo) == 0 or die "Cannot exec $todo\n";
		print "Done.\n";
		
		#
		# Use tie to open stats file and get only second line
		#
		tie @cpgfile, 'Tie::File', "$peakfile.CpG.stats" or die("Cannot tie file $peakfile.CpG.stats");
		
		my $tmp_line		= "$cpgfile[1]";
		my @tmp_line_array	= split /\t/, $tmp_line, -1;
		
		# store the number of peaks overlap with CpG islands
		$cpg_num	= "$tmp_line_array[1]";
		
		untie @cpgfile; 
		
		open (CPGF, "$peakfile.cpgislands") || die "Could not open $peakfile.cpgislands: $!\n";
		my @cpgl = <CPGF>;
		close CPGF;
		my $cpg_lines = @cpgl;
		
		#
		# Extract x random CpG islands
		#
		my $todo = "$ENV{CHIPSEEQERDIR}/ExtractRandomLines -f $peakfile.cpgislands -s $cpg_lines -l $cpg_num";
		$todo .= " > $peakfile.CpG.tmp";
		
		if ($verbose == 1){ 
			print "$todo\n";
		}
		
		print "Running split_file_random for $CpGislands...\n";
		system($todo) == 0 or die "Cannot exec $todo\n";
		
		# Extract x random peaks within CpG islands
		my $todo = "$ENV{CHIPSEEQERDIR}/GetRandomRegions -intervals $peakfile.CpG.tmp -randomize 1 -length $avg_peaks_size ";
		
		if(defined($genome)) {
			$todo .= "-genome $genome ";
		}
		
		if(defined($chrdata)) {
			$todo .= "-chrdata $chrdata ";
		}
		
		$todo .= " > $peakfile.random.cpg.peaks.txt";
		
		if ($verbose == 1) {
			print "Exec: $todo\n";
		}
		
		print "Extracting randomly selected sequences from CpG islands... ";
		system($todo) == 0 or die "Cannot exec $todo\n";
		print "Done.\n";
		
		#
		# Now extract (peaks-x) random peaks (independent of CpG islands)
		#
		open NOCPG, ">$peakfile.NO.CpG";
		
		open( FA, "$peakfile.ALL.CpG" ) or die "Can't open $peakfile.ALL.CpG: $!\n";
		while( my $l = <FA> ){
			chomp $l;
			my @a = split /\t/, $l, -1;
			next if $a[3] != 0;
			print NOCPG "$l\n";
		}
		close FA;
		
		close NOCPG;
		
		# Extract (peaks-x) random peaks
		my $todo = "$ENV{CHIPSEEQERDIR}/GetRandomRegions -intervals $peakfile.NO.CpG -randomize 1 -length $avg_peaks_size ";
		
		if(defined($genome)) {
			$todo .= "-genome $genome ";
		}
		
		if(defined($chrdata)) {
			$todo .= "-chrdata $chrdata ";
		}
		
		$todo .= " > $peakfile.random.cpg-rest.peaks.txt";
		
		if ($verbose == 1) {
			print "Exec: $todo\n";
		}
		
		print "Extracting randomly selected sequences from the rest peaks... ";
		system($todo) == 0 or die "Cannot exec $todo\n";
		print "Done.\n";
		
		my $todo = "cat $peakfile.random.cpg* > $prefix.randompeaks.cpg.tmp";
		system($todo) == 0 or die "Cannot exec $todo\n";
		
		my $todo = "cat $prefix.randompeaks.cpg.tmp | sort -u > $prefix.randompeaks.cpg.txt";
		system($todo) == 0 or die "Cannot exec $todo\n";
		
		# if the output file exists
		if (-e "$prefix.randompeaks.cpg.txt") {	
			print "New file with random peaks created ($prefix.randompeaks.cpg.txt)\n.";
		}
		
		unlink<$peakfile.random.cpg*>;
		unlink<$peakfile.CpG.*>;
		unlink("$prefix.randompeaks.cpg.tmp");
		unlink("$peakfile.NO.CpG");
		unlink("$peakfile.ALL.CpG");
		unlink("$peakfile.CpG");
		#unlink("$peakfile.cpgislands");
	}
}
elsif($randmode eq "default") {
		
	for(my $j=0; $j<$iterations; $j++) {
		
		# Extract random peaks
		my $todo = "$ENV{CHIPSEEQERDIR}/GetRandomRegions -intervals $peakfile -randomize 1 -seed 0 -length $avg_peaks_size ";
		
		if(defined($genome)) {
			$todo .= "-genome $genome ";
		}
		
		if(defined($chrdata)) {
			$todo .= "-chrdata $chrdata ";
		}
		
		$todo .= " > $prefix.random.$j.peaks.txt";
		
		if ($verbose == 1) {
			print "Exec: $todo\n";
		}
		
		print "Extracting randomly selected regions for $peakfile ($j iteration)... ";
		system($todo) == 0 or die "Cannot exec $todo\n";
		print "Done.\n";
	} #end of iterations
}

sub CreateRandomRegions {
	
	my ($j) = @_;	
	
	for(my $i=1; $i<$size; $i++) {
		
		# if the length of the detected peaks (in the given genomic region) is 0, don't run anything
		if($all_peaks_num[$i+1] != 0) {
			
			my $todo = "$ENV{CHIPSEEQERDIR}/ExtractRandomLines -f $all_files_tmp[$i] -s $all_lines_num[$i] -l $all_peaks_num[$i+1]";
			$todo .= " > $peakfile.$all_files[$i].$j.tmp";
			
			if ($verbose == 1){ 
				print "$todo\n";
			}
			
			print "Running ExtractRandomLines for $all_files[$i]...\n";
			system($todo) == 0 or die "Cannot exec $todo\n";
			
			if($i<$size-2) {
				# Extract random peaks for promoters/dw/introns/exons
				$todo = "$ENV{CHIPSEEQERDIR}/GetRandomRegions -intervals $peakfile.$all_files[$i].$j.tmp -hasid 1 -randomize 1 -seed 0 -length $avg_peaks_size ";
			}
			else {
				# Extract random peaks for distal/intergenic
				$todo = "$ENV{CHIPSEEQERDIR}/GetRandomRegions -intervals $peakfile.$all_files[$i].$j.tmp -hasid 0 -randomize 1 -seed 0 -length $avg_peaks_size ";
			}
			
			if(defined($genome)) {
				$todo .= "-genome $genome ";
			}
			
			if(defined($chrdata)) {
				$todo .= "-chrdata $chrdata ";
			}
			
			$todo .= " > $peakfile.random.$all_files[$i].$j.peaks.txt";
			
			if ($verbose == 1) {
				print "Exec: $todo\n";
			}
			
			print "Extracting randomly selected regions for $all_files[$i]... ";
			system($todo) == 0 or die "Cannot exec $todo\n";
			print "Done.\n";
		}
	}
	
	my $todo = "cat $peakfile.random.*.$j.* | sort -u > $prefix.randompeaks.$j.txt";
	system($todo) == 0 or die "Cannot exec $todo\n";
	
	# if the output file exists
	if (-e "$prefix.randompeaks.$j.txt") {	
		print "New file with random peaks created ($prefix.randompeaks.$j.txt)\n.";
	}
}

sub GetPromotersDWFiles {
		
	$promoters_file		= "$ENV{CHIPSEEQERDIR}/DATA/$genome/$db.new.u$lenuP\_d$lendP.PROMOTERS";
	$dw_file			= "$ENV{CHIPSEEQERDIR}/DATA/$genome/$db.new.u$lenuDW\_d$lendDW.DWEXTREMITIES";
	
}

