#!/usr/bin/perl
use lib "$ENV{CHIPSEEQERDIR}/SCRIPTS/PostScript-Simple-0.07/lib";
use lib "$ENV{CHIPSEEQERDIR}";

use PostScript::Simple;
use Table;
use Sets;
use Getopt::Long;
use strict;

my $promlen          = 3000;
my $scriptdir        = "."; 
my $profiles         = undef;
my $summaryfile      = undef;
my $epsfile          = undef;
my $seqlen           = undef;
my $ps2pdf           = 1;
my $leftlabel        = 'leftlabel';
my $rightlabel       = 'rightlabel';
my $motifs_i         = undef;
my $motifs_k         = undef;
my $motifs_m         = undef;
my $clusters         = undef;
my $expfile          = undef;
my $outeps           = undef;
my $rna              = undef;
my $intersection     = 0;
my $overrep          = 0;
my $h                = 100;
my $fullmatrixfile   = undef;
my $forcea4          = 0;
my $fillup           = 0;
my $fastafile        = undef;
my $drawlegend       = 'bottom';
my $draw             = 'open';
my $genelist         = undef;
my $geneprofile      = undef;
my $argmotifname     = undef;
my $genedesc         = undef;

my $xstep            = 10;
my $w                = 5;
my $suffix           = undef;
my $themax           = 1.0;
my $title            = undef;
my $targets          = undef;
my $annotation       = undef;
my $chipdir          = undef;
my $q                = 50;
my $genelist	     = undef;
my $format           = undef;
my $genome			 = "hg18";
my $chrdata			 = undef;
my $db				 = "refSeq";	# could be refSeq, AceView, UCSCGenes or Ensembl
my $getprofiles      = 1;
my $peaks			 = 1;

if (@ARGV == 0) {
	die "Usage: ChIPseeqerPlotAverageReadDensityInGenes --targets=FILE\n";
}

GetOptions (
'profiles=s'	=> \$profiles,
'targets=s'		=> \$targets,
'epsfile=s'		=> \$epsfile,
'rightlabel=s'	=> \$rightlabel,
'leftlabel=s'	=> \$leftlabel,
'seqlen=s'		=> \$seqlen,
'ymax=s'		=> \$themax,
'chipdir=s'     => \$chipdir,
'forcea4=s'     => \$forcea4,
'title=s'       => \$title,
'h=s'           => \$h,
'w=s'           => \$w,
'promlen=s'     => \$promlen,
'xstep=s'       => \$xstep,
'suffix=s'      => \$suffix,
'draw=s'        => \$draw,
'format=s'		=> \$format,
'genelist=s'	=> \$genelist,
'geneprofile=s'	=> \$geneprofile,
'motifname=s'   => \$argmotifname,
'q=s'           => \$q,
'genedesc=s'	=> \$genedesc,
"getprofiles=s" => \$getprofiles,
"genome=s"		=> \$genome,
"db=s"			=> \$db);

#if (! -e $chipdir) {
#	die("Please set --chipdir=DIR (points to directory where reads.chr1, reads.chr2, etc are located)\n");	
#}

if ($genome eq "sacser") {
	$db				= "sgd";
}

$chrdata			= "$ENV{CHIPSEEQERDIR}/DATA/$genome.chrdata";
$annotation			= "$ENV{CHIPSEEQERDIR}/DATA/$genome/$db.new";

if (!defined($profiles)) {
	
	# make profiles from list of peaks
	if (defined($targets)) {
		
		# Create genebodies file from annotation
		my $genebodies = "$annotation.genebodies.txt";
		
		print "Creating file $genebodies...";
		
		open OUT, ">$genebodies" or die "Cannot open $genebodies";
		open IN, $annotation or die "Cannot open $annotation\n";
		while (my $l = <IN>) {
			chomp $l;
			my @a = split /\t/, $l, -1;
			print OUT "$a[1]\t$a[2]\t$a[4]\t$a[5]\n";
		}
		close IN;
		close OUT;
		
		if (-e $genebodies) {
			print "Done.\n";
		}
		
		# find genes that overlap with peaks
		$genelist = "$targets.GeneBodiesWithPeaks";
		my $todo = "$ENV{CHIPSEEQERDIR}/CompareIntervals -intervals1 $genebodies -hasid1 1 -ext1 $promlen -intervals2 $targets -output peaklist > $genelist ";
		print "$todo\n";
		system($todo) == 0 or die "Cannot exec $todo\n";
		
		$profiles = "$targets.genedataprofiles";
	} # else if no genelist defined
	else {
		$profiles = "$genelist.genedataprofiles";
	}
	# get profile, either from genelist made from peaks, or from input genelist
	
	print "\nUSING GENELIST: $genelist \n";
	
	my $todo = "$ENV{CHIPSEEQERDIR}/ChIPseeqerMakeGeneEnrichmentData -intervals $annotation -verbose 0 -chrdata $chrdata -q $q -promlen $promlen -targets $targets ";
	
	if (defined($format)) {
		$todo .= " -format $format ";
	}
	
	if ($genelist ne "all") {
		$todo .= " -genelist $genelist ";
	} else {
		# skip ... means use all genes
	}
	$todo .= " > $profiles";
	
	if ($getprofiles == 1) {
		print "$todo\n";
		system($todo) == 0 or die "Cannot exec $todo\n";
	}
	
	if (-e $profiles) {
		print "$profiles created\n";
	}
	
} 

my $numints = 0; # total number of intervals
my @a_data = ();
open IN, $profiles;
while (my $l = <IN>) {
	chomp $l;
	my @a = split /\t/, $l, -1;
	push @a_data, \@a;
	$numints += @a; 
	$numints --;
}
close IN;



my $xbase  = 100;
my $ybase  = 100;
my $xright = 150;
my $xleft  = $xbase;
my $xsize  = $xbase + $w * $numints + $xbase;
#my $xscale = ($xsize - $xright - $xleft) / $seqlen;
my $ybefleg = 35;

my $yscale = $h / $themax ;

my $ysize  = $ybase + $h + $ybase + 300; 

if ($forcea4 == 1) {
	$ysize = Sets::min(842, $ysize);
}

my $p = new PostScript::Simple(xsize     => $xsize,
ysize     => $ysize,		
colour    => 1,
eps       => 1,
units     => "pt");

$p->setlinewidth(3);
$p->setcolour("black");
$p->setfont("Arial", 10);

# vert + tick marls
$p->line($xleft , $ysize - ($ybase + $h), $xleft , $ysize - $ybase);
for (my $i=0.0; $i<=$themax+0.01; $i+=0.1) {
	$p->line($xleft-2, $ysize - ($ybase + $h - $i * $yscale), $xleft+2, $ysize - ($ybase + $h - $i * $yscale));
	$p->text({ align => 'center', rotate => 0 }, $xleft-15, $ysize - ($ybase  + $h - $i * $yscale + 4), sprintf("%2.1f", $i));
}

$p->setfont("Arial", 30);

$p->text({ align => 'center', rotate => 90 }, $xleft-30, $ysize - ($ybase  + $h/2), "Normalized Peaks Density");

# horiz line
$p->line($xleft, $ysize - ($ybase + $h), $xleft + $numints * $w, $ysize - ($ybase+$h));

if (defined($title)) {
	$p->text({ align => 'center', rotate => 0 }, $xleft + $numints * $w / 2, $ysize - ($ybase-50) , $title);
}


# cycle thru line
my $idx = 0;
my $cntregions = 0;
foreach my $r (@a_data) {
	
	$p->setcolour("black");
	
	my $n = shift @$r;
	
	my $y =  $ysize - ($ybase + $h + 20);
	if (($cntregions+1) % 2 == 0) {
		#  $y -= 25;
	} 
	
	#$p->text({align => "center"}, $xleft + $w * $idx  + $w * scalar(@$r) / 2, $y, $n);
	$p->text({align => "left", rotate => 300}, $xleft + $w * $idx  + $w * scalar(@$r) / 2 - $w/2, $y, $n);
	
	#$p->setcolour("red");
 
	$p->setlinewidth(1);
	foreach my $v (@$r) {
		
		my $x1 = $xbase + $idx * $w;
		my $y1 = $ysize - ($ybase + $h);
		
		my $x2 = $xbase + ($idx + 1) * $w;
		my $y2 = $ysize - ($ybase + $h - $v * $yscale);
		
		$p->box($x1, $y1, $x2, $y2);
		
		$idx ++;
	}
	
	$p->setlinewidth(3);
	#$p->setcolour("black");

	$p->line($xleft + $w * $idx, $ysize - ($ybase + $h), $xleft + $w * $idx, $ysize - $ybase);
	
	
	$cntregions ++;
}


$outeps = "$profiles.plot";
if (defined($suffix)) {
	$outeps .= ".$suffix";
}	
$outeps .= ".eps";

print "Creating $outeps\n";
$p->output("$outeps");


if ($ps2pdf == 1) {
	my $outpdf = $outeps; $outpdf =~ s/\.eps/\.pdf/;
	print "Creating $outpdf\n"; 
	system("ps2pdf -dEPSCrop -dAutoRotatePages=/None $outeps $outpdf");
	
	
	if ($draw eq 'open') {
		system("open $outpdf");
	}
	
}
